### Start Docker containers with the following command :
#  sudo make up

version: '3.6'
services:
    db:
        image: postgres
        environment:
            POSTGRES_PASSWORD: ${POSTGRESQL_PW}
            POSTGRES_USER: concordia
            POSTGRES_MULTIPLE_DATABASES: test_concordia
        ports:
            - 54323:5432
        volumes:
            - ./postgresql:/docker-entrypoint-initdb.d
            - db_volume:/var/lib/postgresl/data/

    rabbit:
        hostname: rabbit
        image: rabbitmq:latest
        ports:
            - 5672:5672
            - 15672:15672

    app:
        build: .
        environment:
            # The concordia app needs to wait for the db to completely start. Use docker-compose-wait
            # as defined at https://github.com/ufoscout/docker-compose-wait
            WAIT_HOSTS: db:5432
            POSTGRESQL_HOST: db
            POSTGRESQL_PW: ${POSTGRESQL_PW}
            SENTRY_BACKEND_DSN: https://34db819263f34c28809da045f841f045@crowd-sentry.loc.gov/2
            SENTRY_FRONTEND_DSN: https://48ec47f15e484502a29879e40ed2e0c3@crowd-sentry.loc.gov/3
            CONCORDIA_ENVIRONMENT: development
            S3_BUCKET_NAME: crowd-dev-content
            DJANGO_SETTINGS_MODULE: concordia.settings_docker
        depends_on:
            - db
        volumes:
            - .:/app
            - images_volume:/concordia_images
        links:
            - rabbit

        ports:
            - 80:80

    importer:
        build:
            context: .
            dockerfile: importer/Dockerfile
        environment:
            POSTGRESQL_HOST: db
            POSTGRESQL_PW: ${POSTGRESQL_PW}
        depends_on:
            - rabbit
            - db
        volumes:
            - images_volume:/concordia_images

    indexer:
        build:
            context: .
            dockerfile: indexer/Dockerfile
        environment:
            POSTGRESQL_HOST: db
            ELASTICSEARCH_ENDPOINT: http://localhost:9200
        depends_on:
            - db

    celerybeat:
        build:
            context: .
            dockerfile: celerybeat/Dockerfile
        environment:
            POSTGRESQL_HOST: db
            POSTGRESQL_PW: ${POSTGRESQL_PW}
        depends_on:
            - rabbit
            - db

volumes:
    ? db_volume
    ? images_volume
