### Before running any Compose services, make sure you have an .env file
# inside your current folder and that it has been populated with the following content:
#   GRAFANA_ADMIN_PW=<grafana-admin-pw>
#   CONCORDIA_ADMIN_PW=<concordia-admin-pw>
#   POSTGRESQL_PW=<postgres-pw>
#   SENTRY_PW=<sentry_password_here>
#   SENTRY_SECRET_KEY=<sentry_secret_key_here>
#   EMAIL_HOST=<your_smtp_email_host_here>
#   EMAIL_HOST_USER=<your_smtp_email_host_user_here>
#   EMAIL_HOST_PASSWORD=<your_smtp_email_host_password_here>
#   DEFAULT_FROM_EMAIL=<your_email_from_address_here>


### Start Docker containers with the following command :
#  sudo make up

### Create grafana user and assign the grafana admin password.
#  with docker-compose running, in a separate terminal window, enter the following commands:
#
#  sudo docker exec -it concordia_grafana bash -c "./setup.sh/grafana_post_run.sh"

version: '3.6'
services:
  db:
    image: postgres
    env_file: ./.env
    environment:
      POSTGRES_PASSWORD: ${POSTGRESQL_PW}
      POSTGRES_USER: concordia
    ports:
      - 54321:5432
    volumes:
      - ./postgresql:/docker-entrypoint-initdb.d
      - db_volume:/var/lib/postgresl/data/
    environment:
        - POSTGRES_MULTIPLE_DATABASES=concordia,sentry

  rabbit:
    hostname: rabbit
    image: rabbitmq:latest
    ports:
      - 5672:5672
      - 15672:15672
  
  elk:
    image: sebp/elk
    ports:
      - "5601:5601"
      - "9200:9200"
      - "5044:5044"

  app:
    env_file: ./.env
    build: .
    environment:
      # The concordia app needs to wait for the db to completely start. Use docker-compose-wait
      # as defined at https://github.com/ufoscout/docker-compose-wait
      WAIT_HOSTS: db:5432, elk:9200
    depends_on:
      - db
      - elk
    volumes:
      - .:/app
      - images_volume:/concordia_images
    links:
      - rabbit
      - elk
    ports:
      - 80:80

  importer:
    build:
       context: .
       dockerfile: importer/Dockerfile
    depends_on:
      - rabbit
    volumes:
      - images_volume:/concordia_images

  wait_elk:
    image: "waisbrot/wait"
    environment:
      TARGETS: elk:9200

volumes:
  db_volume:
  images_volume:

