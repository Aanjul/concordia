Description: >
    This is the main app plus the importer and RabbitMQ service for crowd.loc.gov.

Parameters:
    EnvName:
        Type: String
        Description: which environment to target
        AllowedValues:
            - 'dev'  
            - 'test'
            - 'stage'
            - 'prod'
        ConstraintDescription: Must match a location for secret storage in secretsmanager

    ConcordiaVersion:
        Type: String
        Description: version of concordia, concordia/importer, and rabbitmq docker images to pull and deploy
        Default: latest

    DesiredCount:
        Description: How many instances of this task should we run across our cluster?
        Type: Number
        Default: 2

    MaxCount:
        Description: Maximum number of instances of this task we can run across our cluster
        Type: Number
        Default: 3
    
    Memory:
        Description: How much memory to use for the three tasks combined
        Type: Number
        Default: 4096

    Cpu:
        Description: How much CPU to use for the three tasks combined
        Type: Number
        Default: 2048

Mappings:
    ClusterMapping:
        AutoScalingServiceRoleMap:
            dev: 'arn:aws:iam::351149051428:role/crowd-dev-ECS-RQZSJ89GYY4-ECSServiceAutoScalingRol-KJ5SO8E1KIWF'
            test: 'arn:aws:iam::351149051428:role/crowd-test2-ECS-1I34ZK7Z3-ECSServiceAutoScalingRol-U5GIQOZ1RQ8Z'
            stage: 'arn:aws:iam::351149051428:role/crowd-stage-ECS-BU57ZZJOQ-ECSServiceAutoScalingRol-1EK5KYLQQTVVU'
            prod: 'arn:aws:iam::351149051428:role/crowd-prod-ECS-1501XCPSDM-ECSServiceAutoScalingRol-JUB3TZXYH65T'
        ListenerMap:
            dev: 'arn:aws:elasticloadbalancing:us-east-1:351149051428:listener/app/crowd-dev/8b148c019a172548/3744cde523a62f96'
            test: 'arn:aws:elasticloadbalancing:us-east-1:351149051428:listener/app/crowd-test2/3d7aa00aa454c0c7/1560db455f58ceb2'
            stage: 'arn:aws:elasticloadbalancing:us-east-1:351149051428:listener/app/crowd-stage/53c19bcd76f00cb2/3d0c172d811b4926'
            prod: 'arn:aws:elasticloadbalancing:us-east-1:351149051428:listener/app/crowd-prod/56f99d946d14d887/0955e71fcb8e2f67'
        SSLListenerMap:
            dev: 'arn:aws:elasticloadbalancing:us-east-1:351149051428:listener/app/crowd-dev/8b148c019a172548/b587f6c4a3dea36b'
            test: 'arn:aws:elasticloadbalancing:us-east-1:351149051428:listener/app/crowd-test2/3d7aa00aa454c0c7/00175835d64e823e'
            stage: 'arn:aws:elasticloadbalancing:us-east-1:351149051428:listener/app/crowd-stage/53c19bcd76f00cb2/8d05b9b29c420614'
            prod: 'arn:aws:elasticloadbalancing:us-east-1:351149051428:listener/app/crowd-prod/56f99d946d14d887/2d1e0c1c38f8d018'
        ClusterNameMap:
            dev: crowd-dev
            test: crowd-test2
            stage: crowd-stage
            prod: crowd-prod
        VPCIdMap:
            dev: vpc-017fd2b202f2b6495
            test: vpc-0a9c4c1672305c7d7
            stage: vpc-07bb7696546e2f94d
            prod: vpc-017fd2b202f2b6495

Resources:
    Service:
        Type: AWS::ECS::Service
        DependsOn: ListenerRule
        Properties:
            Cluster: !FindInMap [ClusterMapping, ClusterNameMap, !Ref EnvName]
            Role: !Ref ServiceRole
            DesiredCount: !Ref DesiredCount
            TaskDefinition: !Ref TaskDefinition
            LoadBalancers:
                - ContainerName: 'app'
                  ContainerPort: 80
                  TargetGroupArn: !Ref TargetGroup

    TaskDefinition:
        Type: AWS::ECS::TaskDefinition
        Properties:
            Memory: !Ref Memory
            Cpu: !Ref Cpu
            TaskRoleArn: !GetAtt TaskRole.Arn
            Family: !Sub concordia-${EnvName}
            Volumes:
                - Name: images_volume
            ContainerDefinitions:
                - Name: app
                  Essential: true
                  Image: !Join [ ":", ["351149051428.dkr.ecr.us-east-1.amazonaws.com/concordia", !Ref ConcordiaVersion]]
                  Links:
                      - rabbit
                  Environment:
                      - Name: AWS
                        Value: '1'
                      - Name: ENV_NAME
                        Value: !Ref EnvName
                      - Name: S3_BUCKET_NAME
                        Value: concordia-staticpages
                      - Name: CELERY_BROKER_URL
                        Value: pyamqp://guest@rabbit:5672
                      - Name: AWS_DEFAULT_REGION
                        Value: !Ref AWS::Region
                      - Name: SENTRY_PUBLIC_DSN
                        Value: http://f69265b381a44ceb89e9bd467f86fbdd@devops-sentry-public-lb-718357739.us-east-1.elb.amazonaws.com/3
                  MountPoints:
                      - SourceVolume: images_volume
                        ContainerPath: /concordia_images
                  PortMappings:
                      - ContainerPort: 80
                        HostPort: 80
                  LogConfiguration:
                      LogDriver: awslogs
                      Options:
                          awslogs-group: !Ref AWS::StackName
                          awslogs-region: !Ref AWS::Region
                          awslogs-stream-prefix: concordia-app-
                - Name: importer
                  Essential: true
                  Image: !Join [ ":", [ "351149051428.dkr.ecr.us-east-1.amazonaws.com/concordia/importer", !Ref ConcordiaVersion]]
                  Links:
                      - rabbit
                  Environment:
                      - Name: AWS
                        Value: '1'
                      - Name: ENV_NAME
                        Value: !Ref EnvName
                      - Name: S3_BUCKET_NAME
                        Value: concordia-staticpages
                      - Name: CELERY_BROKER_URL
                        Value: pyamqp://guest@rabbit:5672
                      - Name: AWS_DEFAULT_REGION
                        Value: !Ref AWS::Region
                      - Name: SENTRY_PUBLIC_DSN
                        Value: http://f69265b381a44ceb89e9bd467f86fbdd@devops-sentry-public-lb-718357739.us-east-1.elb.amazonaws.com/3
                  MountPoints:
                      - SourceVolume: images_volume
                        ContainerPath: /concordia_images
                  LogConfiguration:
                      LogDriver: awslogs
                      Options:
                          awslogs-group: !Ref AWS::StackName
                          awslogs-region: !Ref AWS::Region
                          awslogs-stream-prefix: concordia-importer-
                - Name: rabbit
                  Essential: true
                  Image: !Join [ ":", ["351149051428.dkr.ecr.us-east-1.amazonaws.com/rabbitmq", !Ref ConcordiaVersion]]
                  Hostname: rabbit
                  PortMappings:
                      - ContainerPort: 5672
                        HostPort: 5672

    CloudWatchLogsGroup:
        Type: AWS::Logs::LogGroup
        Properties:
            LogGroupName: !Ref AWS::StackName
            RetentionInDays: 365

    TargetGroup:
        Type: AWS::ElasticLoadBalancingV2::TargetGroup
        Properties:
            VpcId: !FindInMap [ClusterMapping, VPCIdMap, !Ref EnvName]
            Port: 80
            Protocol: HTTP
            Matcher:
                HttpCode: 200-299
            HealthCheckIntervalSeconds: 10
            HealthCheckPath: /healthz
            HealthCheckProtocol: HTTP
            HealthCheckTimeoutSeconds: 5
            HealthyThresholdCount: 2

    ListenerRule:
        Type: AWS::ElasticLoadBalancingV2::ListenerRule
        Properties:
            ListenerArn: !FindInMap [ClusterMapping, ListenerMap, !Ref EnvName]
            Priority: 1
            Conditions:
                - Field: path-pattern
                  Values:
                      - /*
            Actions:
                - TargetGroupArn: !Ref TargetGroup
                  Type: forward
    
    SSLListenerRule:
        Type: AWS::ElasticLoadBalancingV2::ListenerRule
        Properties:
            ListenerArn: !FindInMap [ClusterMapping, SSLListenerMap, !Ref EnvName]
            Priority: 1
            Conditions:
                - Field: path-pattern
                  Values:
                      - /*
            Actions:
                - TargetGroupArn: !Ref TargetGroup
                  Type: forward

    TaskRole:
        Type: AWS::IAM::Role
        Properties:
            Path: /
            AssumeRolePolicyDocument:
                Version: '2012-10-17'
                Statement:
                    - Sid: ''
                      Effect: 'Allow'
                      Principal:
                          Service: 'ecs-tasks.amazonaws.com'
                      Action: 'sts:AssumeRole'
            Policies:
                - PolicyName: !Sub ecs-concordia-taskpolicy-${AWS::StackName}
                  PolicyDocument:
                      Version: '2012-10-17'
                      Statement:
                          - Action:
                                - 's3:PutObject'
                                - 's3:GetObject'
                                - 's3:AbortMultipartUpload'
                                - 's3:ListMultipartUploadParts'
                                - 's3:ListBucket'
                                - 's3:ListBucketMultipartUploads'
                                - 'secretsmanager:GetResourcePolicy'
                                - 'secretsmanager:GetSecretValue'
                                - 'secretsmanager:DescribeSecret'
                                - 'secretsmanager:ListSecretVersionIds'
                                - 'kms:GetParametersForImport'
                                - 'kms:GetKeyRotationStatus'
                                - 'kms:GetKeyPolicy'
                                - 'kms:DescribeKey'
                                - 'kms:ListResourceTags'
                                - 'kms:Decrypt'
                                - 'kms:GenerateDataKey'
                            Effect: 'Allow'
                            Resource: '*'

    # This IAM Role grants the service access to register/unregister with the
    # Application Load Balancer (ALB). It is based on the default documented here:
    # http://docs.aws.amazon.com/AmazonECS/latest/developerguide/service_IAM_role.html
    ServiceRole:
        Type: AWS::IAM::Role
        Properties:
            RoleName: !Sub ecs-concordia-service-${AWS::StackName}
            Path: /
            AssumeRolePolicyDocument:
                Statement:
                    - Effect: 'Allow'
                      Principal:
                          Service:
                              - 'ecs.amazonaws.com'
                      Action:
                          - 'sts:AssumeRole'
            Policies:
                - PolicyName: !Sub ecs-concordia-service-${AWS::StackName}
                  PolicyDocument:
                      Version: '2012-10-17'
                      Statement:
                          - Action:
                                - 'ec2:AuthorizeSecurityGroupIngress'
                                - 'ec2:Describe*'
                                - 'elasticloadbalancing:DeregisterInstancesFromLoadBalancer'
                                - 'elasticloadbalancing:Describe*'
                                - 'elasticloadbalancing:RegisterInstancesWithLoadBalancer'
                                - 'elasticloadbalancing:DeregisterTargets'
                                - 'elasticloadbalancing:DescribeTargetGroups'
                                - 'elasticloadbalancing:DescribeTargetHealth'
                                - 'elasticloadbalancing:RegisterTargets'
                            Effect: 'Allow'
                            Resource: '*'

    ServiceScalableTarget:
        Type: 'AWS::ApplicationAutoScaling::ScalableTarget'
        Properties:
            MaxCapacity: !Ref MaxCount
            MinCapacity: !Ref DesiredCount
            ResourceId: !Join
                - /
                - - service
                  - !FindInMap [ClusterMapping, ClusterNameMap, !Ref EnvName]
                  - !GetAtt Service.Name
            RoleARN: !FindInMap [ClusterMapping, AutoScalingServiceRoleMap, !Ref EnvName]
            ScalableDimension: ecs:service:DesiredCount
            ServiceNamespace: ecs

    ServiceScaleOutPolicy:
        Type: 'AWS::ApplicationAutoScaling::ScalingPolicy'
        Properties:
            PolicyName: ServiceScaleOutPolicy
            PolicyType: StepScaling
            ScalingTargetId: !Ref ServiceScalableTarget
            StepScalingPolicyConfiguration:
                AdjustmentType: ChangeInCapacity
                Cooldown: 1800
                MetricAggregationType: Average
                StepAdjustments:
                    - MetricIntervalLowerBound: 0
                      ScalingAdjustment: 1

    ServiceScaleInPolicy:
        Type: 'AWS::ApplicationAutoScaling::ScalingPolicy'
        Properties:
            PolicyName: ServiceScaleInPolicy
            PolicyType: StepScaling
            ScalingTargetId: !Ref ServiceScalableTarget
            StepScalingPolicyConfiguration:
                AdjustmentType: ChangeInCapacity
                Cooldown: 1800
                MetricAggregationType: Average
                StepAdjustments:
                    - MetricIntervalUpperBound: 0
                      ScalingAdjustment: -1

    CPUScaleOutAlarm:
        Type: AWS::CloudWatch::Alarm
        Properties:
            AlarmName: !Sub CPU gt 90% ${AWS::StackName}
            AlarmDescription: Alarm if cpu utilization greater than 90% of reserved cpu
            Namespace: AWS/ECS
            MetricName: CPUUtilization
            Dimensions:
                - Name: ClusterName
                  Value: !FindInMap [ClusterMapping, ClusterNameMap, !Ref EnvName]
                - Name: ServiceName
                  Value: !GetAtt Service.Name
            Statistic: Maximum
            Period: 60
            EvaluationPeriods: 3
            Threshold: 90
            ComparisonOperator: GreaterThanThreshold
            AlarmActions:
                - !Ref ServiceScaleOutPolicy

    CPUScaleInAlarm:
        Type: AWS::CloudWatch::Alarm
        Properties:
            AlarmName: !Sub CPU lt 70% ${AWS::StackName}
            AlarmDescription: Alarm if cpu utilization greater than 70% of reserved cpu
            Namespace: AWS/ECS
            MetricName: CPUUtilization
            Dimensions:
                - Name: ClusterName
                  Value: !FindInMap [ClusterMapping, ClusterNameMap, !Ref EnvName]
                - Name: ServiceName
                  Value: !GetAtt Service.Name
            Statistic: Maximum
            Period: 60
            EvaluationPeriods: 10
            Threshold: 70
            ComparisonOperator: LessThanThreshold
            AlarmActions:
                - !Ref ServiceScaleInPolicy

Outputs:
    ServiceName:
        Description: Name of the ECS service that was created
        Value: !GetAtt Service.Name